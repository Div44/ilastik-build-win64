diff -rupN CMakeLists.txt CMakeLists.txt
--- CMakeLists.txt	Sat Feb  8 10:16:16 2014
+++ CMakeLists.txt	Thu Feb 13 21:10:35 2014
@@ -47,19 +47,6 @@ message(STATUS "CMAKE_CXX_COMPILER_ID   
 message(STATUS "CMAKE_CXX_COMPILER_VERSION = ${CMAKE_CXX_COMPILER_VERSION}")
 message(STATUS "CMAKE_COMPILER_IS_GNUCXX   = ${CMAKE_COMPILER_IS_GNUCXX}"  )
 
-
-if(WIN32)
-  message(STATUS "")
-  message(STATUS "WARNING:")
-  message(STATUS "Automatic installation is currently not available for this platform.")
-  message(STATUS "Please use the manual installation, as described in the README.txt file.")
-  message(STATUS "You can also use the 'include' folder directly, but you may want to edit")
-  message(STATUS "'include/armadillo_bits/config.hpp' if you have LAPACK installed.")
-  message(STATUS "")
-endif()
-
-
-
 ##
 ## Find LAPACK and BLAS libraries, or their optimised versions
 ##
@@ -223,15 +210,14 @@ if(APPLE)
 
 endif()
 
+find_package(HDF5)
+message(STATUS "HDF5_FOUND     = ${HDF5_FOUND}")
 
-# find_package(HDF5)
-# message(STATUS "HDF5_FOUND     = ${HDF5_FOUND}")
-# 
-# if(HDF5_FOUND)
-#   set(ARMA_USE_HDF5 true)
-#   set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${HDF5_INCLUDE_DIRS})
-#   set(ARMA_LIBS ${ARMA_LIBS} ${HDF5_LIBRARIES})
-# endif()
+if(HDF5_FOUND)
+  set(ARMA_USE_HDF5 true)
+  set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${HDF5_INCLUDE_DIRS})
+  set(ARMA_LIBS ${ARMA_LIBS} ${HDF5_LIBRARIES})
+endif()
 
 
 include(ARMA_FindARPACK)
@@ -315,10 +301,13 @@ endif()
 message(STATUS "CMAKE_CXX_FLAGS           = ${CMAKE_CXX_FLAGS}"          )
 message(STATUS "CMAKE_SHARED_LINKER_FLAGS = ${CMAKE_SHARED_LINKER_FLAGS}")
 
-add_library( armadillo SHARED ${PROJECT_SOURCE_DIR}/src/wrapper.cpp )
-target_link_libraries( armadillo ${ARMA_LIBS} )
-set_target_properties(armadillo PROPERTIES VERSION ${ARMA_MAJOR}.${ARMA_MINOR_ALT}.${ARMA_PATCH} SOVERSION ${ARMA_MAJOR})
-
+if(MSVC)
+    add_library( armadillo STATIC ${PROJECT_SOURCE_DIR}/src/wrapper.cpp )
+else()
+    add_library( armadillo SHARED ${PROJECT_SOURCE_DIR}/src/wrapper.cpp )
+    target_link_libraries( armadillo ${ARMA_LIBS} )
+    set_target_properties(armadillo PROPERTIES VERSION ${ARMA_MAJOR}.${ARMA_MINOR_ALT}.${ARMA_PATCH} SOVERSION ${ARMA_MAJOR})
+endif()
 
 ################################################################################
 # INSTALL CONFIGURATION
@@ -328,7 +317,7 @@ set_target_properties(armadillo PROPERTI
 # does not search /usr/local/lib by default, we need to place the
 # library in either /usr/lib or /usr/lib64
 
-if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
+if(NOT WIN32 AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   message(STATUS "*** CMAKE_INSTALL_PREFIX was initalised by cmake to the default value of ${CMAKE_INSTALL_PREFIX}")
   message(STATUS "*** CMAKE_INSTALL_PREFIX changed to /usr")
   unset(CMAKE_INSTALL_PREFIX)
@@ -392,6 +381,11 @@ PATTERN "*orig" EXCLUDE
 install(TARGETS armadillo 
   DESTINATION ${INSTALL_LIB_DIR}
   EXPORT ArmadilloLibraryDepends)
+  
+INSTALL(TARGETS armadillo
+        RUNTIME DESTINATION bin 
+        LIBRARY DESTINATION ${INSTALL_LIB_DIR} 
+        ARCHIVE DESTINATION ${INSTALL_LIB_DIR})
 
 # Export the package for use from the build-tree
 # (this registers the build-tree with a global CMake-registry)
diff -rupN include/armadillo_bits/config.hpp.cmake include/armadillo_bits/config.hpp.cmake
--- include/armadillo_bits/config.hpp.cmake	Fri Jan  3 01:59:32 2014
+++ include/armadillo_bits/config.hpp.cmake	Thu Feb 13 20:47:23 2014
@@ -60,7 +60,7 @@
 //// Make sure the directory has a trailing /
 
 #if !defined(ARMA_64BIT_WORD)
-// #define ARMA_64BIT_WORD
+#cmakedefine ARMA_64BIT_WORD
 //// Uncomment the above line if you require matrices/vectors capable of holding more than 4 billion elements.
 //// Your machine and compiler must have support for 64 bit integers (eg. via "long" or "long long")
 #endif
@@ -161,3 +161,16 @@
 #if defined(ARMA_DONT_USE_HDF5)
   #undef ARMA_USE_HDF5
 #endif
+
+#if defined(_MSC_VER)
+    #ifdef ARMA_DLL
+        #define ARMA_EXPORT __declspec(dllexport)
+    #elif defined(ARMA_STATIC_LIB)
+        #define ARMA_EXPORT
+    #else
+        #define ARMA_EXPORT __declspec(dllimport)
+    #endif
+#else
+    #define ARMA_EXPORT
+#endif
+
